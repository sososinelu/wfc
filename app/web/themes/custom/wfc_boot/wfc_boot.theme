<?php

/**
 * @file
 * Functions to support theming in the wfc_boot.
 */

use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Console\Bootstrap\Drupal;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\wfc_sendgrid\Controller\WfcSendgridController;

/**
 * Implements template_preprocess_html().
 * @param array $variables
 */
function wfc_boot_preprocess_html(&$variables)
{
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path--' . Html::cleanCssIdentifier($path_alias);
}

/**
 * Implements template_preprocess_page.
 * @param array $variable  s
 */
function wfc_boot_preprocess_page(&$variables)
{
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = ['#type' => 'link', '#title' => $site_name, '#url' => Url::fromRoute('<front>')];
}

/**
 * Implements template_preprocess_node.
 * @param array $variables
 */
function wfc_boot_preprocess_node(&$variables)
{
  $node = $variables['node'];
  $content_type = $node->getType();
  $view_mode = $variables['view_mode'];

  $variables['attributes']['class'][] = 'node--' . $content_type;
  $variables['attributes']['class'][] = 'view-mode--' . $view_mode;
}

/**
 * Implements hook_preprocess_block().
 */
function wfc_boot_preprocess_block(&$variables) {
  $block_id = $variables['elements']['#plugin_id'];

  if ($block_id == 'footer_block' || $block_id == 'premium_footer_block') {
    //  $variables['attributes']['class'] = array_merge($variables['attributes']['class'], ['col-12']);
     $variables['attributes']['class'][] = 'col-12';
  }
}

/**
 * Implements hook_form_alter.
 * @param array $form, &$form_state, $form_id
 */
function wfc_boot_form_alter(&$form, &$form_state, $form_id)
{
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $page_url = $_SERVER['REQUEST_URI'];
  $page_url = rtrim($page_url,"/");

  if ($form_id == 'user_login_form' && $page_url == '/user/login') {
    $form['name']['#title'] = t('Email address');
    $form['name']['#description'] = t('Enter your Wanderers\' Flight Club email address.');
    $form['pass']['#description'] = t('Enter the password that accompanies your email address.');
    $form['#prefix'] = t('<div class="login-form-wrapper"><h2>Wanderer Login</h2>');
    $form['#suffix'] = t('<a href="/user/password">Reset your password</a></div>');
  } else if ($form_id == 'user_pass' && $page_url == '/user/password') {
    $form['name']['#title'] = t('Email address');
    $form['#prefix'] = t('<div class="reset-form-wrapper"><h2>Reset Wanderer Password</h2>');
    $form['#suffix'] = t('<a href="/user/login">Back to Login</a></div>');
  } else if($form_id == 'user_pass_reset') {
    $form['#prefix'] = t('<div class="one-time-login-form-wrapper"><h2>One time login</h2>');
    $form['#suffix'] = t('</div>');
    if ($user->hasRole('premium')) {
      $form['actions']['submit']['#submit'][] = 'resetPasswordSubmit';
    }
  } else if ($form_id == 'user_form') {
    $form['#prefix'] = t('<div class="user-form-wrapper"><h2>Set your password</h2>');
    $form['#suffix'] = t('</div>');
    $form['account']['mail']['#attributes'] = ['readonly' => 'readonly'];
    unset($form['field_price']);
    unset($form['field_product_id']);
    unset($form['field_product_name']);
    unset($form['field_stripe_customer_id']);
    unset($form['field_subscription_date']);

    if ($user->hasRole('premium')) {
      $form['actions']['submit']['#submit'][] = 'setPasswordSubmitRedirect';
    }
  }
}

/**
 * Implements hook_preprocess_user.
 */
function wfc_boot_preprocess_user(&$vars)
{
  $vars['intro_title'] = (\Drupal::state()->get('up_intro_title') ? \Drupal::state()->get('up_intro_title') : '');
  $vars['intro_text'] = (\Drupal::state()->get('up_intro_text') ? \Drupal::state()->get('up_intro_text')['value'] : '');
}

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 */
function wfc_boot_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  ];
}

// ---------------------- HELPER FUNCTIONS ----------------------

/**
 * Set password form submit redirect
 */
function setPasswordSubmitRedirect($form, &$form_state)
{
  $user = User::load(\Drupal::currentUser()->id());
  if ($user->hasRole('premium')) {
    $response = new RedirectResponse('/user');
  }
  $response->send();
}

/**
 * Reset password form submit
 */
function resetPasswordSubmit($form, &$form_state)
{
  // user email from form
  $email = '';
  // load user by email
  $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['mail' => $email]);
  $user = reset($users);
  if ($user) {
    // generate pass reset link
    $config['passResetUrl'] = user_pass_reset_url($user);

    // send email to user
    $sendgrid = new WfcSendgridController;

    if(!$sendgrid->sendSendgridEmail(
      $title ?: "Password reset for Wanderers' Flight Club!",
      $email,
      'password_reset_template',
      $config
    )) {
      // Sendgrid fail
      \Drupal::logger('password_reset')->notice('Password reset fail - ' . $email . ' >>> email didn\'t send.');
    }

    // Sendgrid success
    $response = new RedirectResponse(Url::fromRoute('wfc_stripe.wanderer_registration', ['status' => 'success-password-rest'])->setAbsolute()->toString());
    $response->send();
  } else {
    // USer not found
    \Drupal::logger('password_reset')->notice('Password reset fail - ' . $email . ' >>> User not found.');
  }
}

